{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useGLTF } from '@react-three/drei';\nimport { useThree } from '@react-three/fiber';\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';\n\n// function DigitalHuman() {\n//   window.createImageBitmap = undefined\n//   const { scene, materials, textures, isLoading, error } = useGLTF('/models/xiaohei.fbx', true); // Ensure the second argument is true for loading optimally\n\n//   useEffect(() => {\n//     if (error) {\n//       console.error('Error loading model:', error);\n//     }\n//     if (isLoading) {\n//       console.log('Loading model...');\n//     }\n//     if (scene) {\n//       console.log('Model loaded:', scene);\n//       console.log('Materials:', materials);\n//       console.log('Textures:', textures);\n//     }\n//   }, [scene, materials, textures, isLoading, error]);\n\n//   if (error) {\n//     return <p>Error loading model.</p>;\n//   }\n//   if (isLoading) {\n//     return <p>Loading model...</p>;\n//   }\n//   return <primitive object={scene} scale={0.1} position={[0, -1.5, 0]} />;\n// }\n\n// export default DigitalHuman;\n\nfunction DigitalHuman() {\n  _s();\n  const {\n    scene\n  } = useThree();\n  const loader = new FBXLoader();\n  useEffect(() => {\n    loader.load('/models/xiaohei.fbx', fbx => {\n      scene.add(fbx);\n    });\n  }, [loader, scene]);\n  return null; // ��Ϊ��ֱ�ӽ�ģ�����ӵ������У����Է��� null ��յ� fragment\n}\n_s(DigitalHuman, \"UhCC8wDD2cMyItT8qLKLhYRbhzM=\", false, function () {\n  return [useThree];\n});\n_c = DigitalHuman;\nexport default DigitalHuman;\nvar _c;\n$RefreshReg$(_c, \"DigitalHuman\");","map":{"version":3,"names":["React","useEffect","useGLTF","useThree","FBXLoader","DigitalHuman","_s","scene","loader","load","fbx","add","_c","$RefreshReg$"],"sources":["C:/Users/18489/Downloads/digital-human/digital-human/digital-human-frontend/src/DigitalHuman.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useGLTF } from '@react-three/drei';\nimport { useThree } from '@react-three/fiber';\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';\n\n// function DigitalHuman() {\n//   window.createImageBitmap = undefined\n//   const { scene, materials, textures, isLoading, error } = useGLTF('/models/xiaohei.fbx', true); // Ensure the second argument is true for loading optimally\n\n//   useEffect(() => {\n//     if (error) {\n//       console.error('Error loading model:', error);\n//     }\n//     if (isLoading) {\n//       console.log('Loading model...');\n//     }\n//     if (scene) {\n//       console.log('Model loaded:', scene);\n//       console.log('Materials:', materials);\n//       console.log('Textures:', textures);\n//     }\n//   }, [scene, materials, textures, isLoading, error]);\n\n//   if (error) {\n//     return <p>Error loading model.</p>;\n//   }\n//   if (isLoading) {\n//     return <p>Loading model...</p>;\n//   }\n//   return <primitive object={scene} scale={0.1} position={[0, -1.5, 0]} />;\n// }\n\n// export default DigitalHuman;\n\n\nfunction DigitalHuman() {\n  const { scene } = useThree();\n  const loader = new FBXLoader();\n\n  useEffect(() => {\n    loader.load('/models/xiaohei.fbx', (fbx) => {\n      scene.add(fbx);\n    });\n  }, [loader, scene]);\n\n  return null; // ��Ϊ��ֱ�ӽ�ģ�����ӵ������У����Է��� null ��յ� fragment\n}\n\nexport default DigitalHuman;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,SAAS,QAAQ,sCAAsC;;AAEhE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM;IAAEC;EAAM,CAAC,GAAGJ,QAAQ,CAAC,CAAC;EAC5B,MAAMK,MAAM,GAAG,IAAIJ,SAAS,CAAC,CAAC;EAE9BH,SAAS,CAAC,MAAM;IACdO,MAAM,CAACC,IAAI,CAAC,qBAAqB,EAAGC,GAAG,IAAK;MAC1CH,KAAK,CAACI,GAAG,CAACD,GAAG,CAAC;IAChB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACF,MAAM,EAAED,KAAK,CAAC,CAAC;EAEnB,OAAO,IAAI,CAAC,CAAC;AACf;AAACD,EAAA,CAXQD,YAAY;EAAA,QACDF,QAAQ;AAAA;AAAAS,EAAA,GADnBP,YAAY;AAarB,eAAeA,YAAY;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}