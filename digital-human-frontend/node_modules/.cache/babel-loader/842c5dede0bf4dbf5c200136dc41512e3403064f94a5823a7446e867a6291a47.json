{"ast":null,"code":"var _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n\n// const VoiceInput = ({ onInput }) => {\n//   const [isListening, setIsListening] = useState(false);\n//   const [recognition, setRecognition] = useState(null);\n\n//   useEffect(() => {\n//     if (!('webkitSpeechRecognition' in window)) {\n//       console.error(\"Web Speech API is not supported by this browser.\");\n//       return;\n//     }\n\n//     const speechRecognition = new window.webkitSpeechRecognition();\n//     speechRecognition.continuous = false;\n//     speechRecognition.interimResults = false;\n//     speechRecognition.lang = 'en-US';\n\n//     speechRecognition.onstart = () => setIsListening(true);\n//     speechRecognition.onend = () => setIsListening(false);\n//     speechRecognition.onerror = (event) => console.error(event);\n//     speechRecognition.onresult = (event) => {\n//       const transcript = event.results[0][0].transcript;\n//       onInput(transcript);\n//     };\n\n//     setRecognition(speechRecognition);\n//   }, [onInput]);\n\n//   const startListening = () => {\n//     if (recognition) recognition.start();\n//   };\n\n//   return (\n//     <div>\n//       <button onClick={startListening}>\n//         {isListening ? 'Listening...' : 'Start Voice Input'}\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default VoiceInput;\n\nimport React, { useEffect, useRef, useState } from 'react';\nconst VoiceInput = ({\n  onInput,\n  isSpeaking,\n  isListening\n}) => {\n  _s();\n  const recognition = useRef(null);\n  const [isRecognitionRunning, setIsRecognitionRunning] = useState(false);\n  useEffect(() => {\n    if ('webkitSpeechRecognition' in window) {\n      recognition.current = new window.webkitSpeechRecognition();\n      recognition.current.continuous = true;\n      recognition.current.interimResults = true;\n      recognition.current.lang = 'zh-CN'; // 设置语言为中文\n\n      recognition.current.onresult = event => {\n        let finalTranscript = '';\n        for (let i = event.resultIndex; i < event.results.length; ++i) {\n          if (event.results[i].isFinal) {\n            finalTranscript += event.results[i][0].transcript;\n          }\n        }\n        if (finalTranscript) {\n          onInput(finalTranscript);\n        }\n      };\n      recognition.current.onerror = event => {\n        console.error('Speech recognition error', event);\n        if (event.error === 'not-allowed' || event.error === 'service-not-allowed') {\n          alert('麦克风访问被拒绝或服务不可用');\n        }\n      };\n      recognition.current.onend = () => {\n        setIsRecognitionRunning(false);\n        if (isListening && !isSpeaking) {\n          startRecognition();\n        }\n      };\n    } else {\n      alert('您的浏览器不支持语音识别功能。');\n    }\n  }, [isListening, isSpeaking, onInput]);\n  const startRecognition = () => {\n    if (recognition.current && !isRecognitionRunning) {\n      recognition.current.start();\n      setIsRecognitionRunning(true);\n    }\n  };\n  const stopRecognition = () => {\n    if (recognition.current && isRecognitionRunning) {\n      recognition.current.stop();\n      setIsRecognitionRunning(false);\n    }\n  };\n  useEffect(() => {\n    if (isSpeaking) {\n      stopRecognition(); // 暂停语音识别\n    } else if (isListening) {\n      startRecognition(); // 恢复语音识别\n    }\n  }, [isSpeaking, isListening]);\n  return null;\n};\n_s(VoiceInput, \"tzX4TgKZMl0+OwvkzQtCp5n3eec=\");\n_c = VoiceInput;\nexport default VoiceInput;\nvar _c;\n$RefreshReg$(_c, \"VoiceInput\");","map":{"version":3,"names":["React","useEffect","useRef","useState","VoiceInput","onInput","isSpeaking","isListening","_s","recognition","isRecognitionRunning","setIsRecognitionRunning","window","current","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","finalTranscript","i","resultIndex","results","length","isFinal","transcript","onerror","console","error","alert","onend","startRecognition","start","stopRecognition","stop","_c","$RefreshReg$"],"sources":["/Users/chenyangdu/Desktop/SCU/找工/联想/untitled folder/digital-human/digital-human/digital-human/digital-human-frontend/src/VoiceInput.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n\n// const VoiceInput = ({ onInput }) => {\n//   const [isListening, setIsListening] = useState(false);\n//   const [recognition, setRecognition] = useState(null);\n\n//   useEffect(() => {\n//     if (!('webkitSpeechRecognition' in window)) {\n//       console.error(\"Web Speech API is not supported by this browser.\");\n//       return;\n//     }\n\n//     const speechRecognition = new window.webkitSpeechRecognition();\n//     speechRecognition.continuous = false;\n//     speechRecognition.interimResults = false;\n//     speechRecognition.lang = 'en-US';\n\n//     speechRecognition.onstart = () => setIsListening(true);\n//     speechRecognition.onend = () => setIsListening(false);\n//     speechRecognition.onerror = (event) => console.error(event);\n//     speechRecognition.onresult = (event) => {\n//       const transcript = event.results[0][0].transcript;\n//       onInput(transcript);\n//     };\n\n//     setRecognition(speechRecognition);\n//   }, [onInput]);\n\n//   const startListening = () => {\n//     if (recognition) recognition.start();\n//   };\n\n//   return (\n//     <div>\n//       <button onClick={startListening}>\n//         {isListening ? 'Listening...' : 'Start Voice Input'}\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default VoiceInput;\n\n\nimport React, { useEffect, useRef, useState } from 'react';\n\nconst VoiceInput = ({ onInput, isSpeaking, isListening }) => {\n  const recognition = useRef(null);\n  const [isRecognitionRunning, setIsRecognitionRunning] = useState(false);\n\n  useEffect(() => {\n    if ('webkitSpeechRecognition' in window) {\n      recognition.current = new window.webkitSpeechRecognition();\n      recognition.current.continuous = true;\n      recognition.current.interimResults = true;\n      recognition.current.lang = 'zh-CN'; // 设置语言为中文\n\n      recognition.current.onresult = (event) => {\n        let finalTranscript = '';\n        for (let i = event.resultIndex; i < event.results.length; ++i) {\n          if (event.results[i].isFinal) {\n            finalTranscript += event.results[i][0].transcript;\n          }\n        }\n        if (finalTranscript) {\n          onInput(finalTranscript);\n        }\n      };\n\n      recognition.current.onerror = (event) => {\n        console.error('Speech recognition error', event);\n        if (event.error === 'not-allowed' || event.error === 'service-not-allowed') {\n          alert('麦克风访问被拒绝或服务不可用');\n        }\n      };\n\n      recognition.current.onend = () => {\n        setIsRecognitionRunning(false);\n        if (isListening && !isSpeaking) {\n          startRecognition();\n        }\n      };\n    } else {\n      alert('您的浏览器不支持语音识别功能。');\n    }\n  }, [isListening, isSpeaking, onInput]);\n\n  const startRecognition = () => {\n    if (recognition.current && !isRecognitionRunning) {\n      recognition.current.start();\n      setIsRecognitionRunning(true);\n    }\n  };\n\n  const stopRecognition = () => {\n    if (recognition.current && isRecognitionRunning) {\n      recognition.current.stop();\n      setIsRecognitionRunning(false);\n    }\n  };\n\n  useEffect(() => {\n    if (isSpeaking) {\n      stopRecognition(); // 暂停语音识别\n    } else if (isListening) {\n      startRecognition(); // 恢复语音识别\n    }\n  }, [isSpeaking, isListening]);\n\n  return null;\n};\n\nexport default VoiceInput;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}