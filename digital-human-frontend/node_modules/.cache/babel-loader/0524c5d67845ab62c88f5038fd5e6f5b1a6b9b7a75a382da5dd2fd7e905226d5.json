{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport { useFrame, extend } from '@react-three/fiber';\nimport { Line2, LineMaterial, LineSegmentsGeometry } from 'three-stdlib';\nconst context = /*#__PURE__*/React.createContext(null);\nconst arrColor = color => color instanceof THREE.Color ? color.toArray() : color;\nconst arrPos = pos => pos instanceof THREE.Vector3 ? pos.toArray() : pos;\nconst Segments = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {\n  const {\n    limit = 1000,\n    lineWidth = 1.0,\n    children,\n    ...rest\n  } = props;\n  const [segments, setSegments] = React.useState([]);\n  const [line] = React.useState(() => new Line2());\n  const [material] = React.useState(() => new LineMaterial());\n  const [geometry] = React.useState(() => new LineSegmentsGeometry());\n  const [resolution] = React.useState(() => new THREE.Vector2(512, 512));\n  const [positions] = React.useState(() => Array(limit * 6).fill(0));\n  const [colors] = React.useState(() => Array(limit * 6).fill(0));\n  const api = React.useMemo(() => ({\n    subscribe: ref => {\n      setSegments(segments => [...segments, ref]);\n      return () => setSegments(segments => segments.filter(item => item.current !== ref.current));\n    }\n  }), []);\n  useFrame(() => {\n    for (let i = 0; i < limit; i++) {\n      var _segments$i;\n      const segment = (_segments$i = segments[i]) == null ? void 0 : _segments$i.current;\n      const segmentStart = segment ? arrPos(segment.start) : [0, 0, 0];\n      const segmentEnd = segment ? arrPos(segment.end) : [0, 0, 0];\n      const segmentColor = segment ? arrColor(segment.color) : [1, 1, 1]; //console.log(segmentStart, segmentEnd, segmentColor)\n\n      for (var j = 0; j < 3; j++) {\n        positions[i * 6 + j] = segmentStart[j];\n        positions[i * 6 + j + 3] = segmentEnd[j];\n        colors[i * 6 + j] = segmentColor[j];\n        colors[i * 6 + j + 3] = segmentColor[j];\n      }\n    }\n    geometry.setColors(colors);\n    geometry.setPositions(positions);\n    line.computeLineDistances();\n  });\n  return /*#__PURE__*/React.createElement(\"primitive\", {\n    object: line,\n    ref: forwardedRef\n  }, /*#__PURE__*/React.createElement(\"primitive\", {\n    object: geometry,\n    attach: \"geometry\"\n  }), /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: material,\n    attach: \"material\",\n    vertexColors: true,\n    resolution: resolution,\n    linewidth: lineWidth\n  }, rest)), /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n});\nclass SegmentObject {\n  constructor() {\n    this.color = new THREE.Color('white');\n    this.start = new THREE.Vector3(0, 0, 0);\n    this.end = new THREE.Vector3(0, 0, 0);\n  }\n}\nconst Segment = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {\n  const api = React.useContext(context);\n  if (!api) throw 'Segment must used inside Segments component.';\n  const ref = React.useRef();\n  React.useMemo(() => extend({\n    SegmentObject\n  }), []);\n  React.useLayoutEffect(() => api.subscribe(ref), []);\n  return /*#__PURE__*/React.createElement(\"segmentObject\", _extends({\n    ref: mergeRefs([ref, forwardedRef])\n  }, props));\n});\nexport { Segment, Segments };","map":{"version":3,"names":["_extends","THREE","React","mergeRefs","useFrame","extend","Line2","LineMaterial","LineSegmentsGeometry","context","createContext","arrColor","color","Color","toArray","arrPos","pos","Vector3","Segments","forwardRef","props","forwardedRef","limit","lineWidth","children","rest","segments","setSegments","useState","line","material","geometry","resolution","Vector2","positions","Array","fill","colors","api","useMemo","subscribe","ref","filter","item","current","i","_segments$i","segment","segmentStart","start","segmentEnd","end","segmentColor","j","setColors","setPositions","computeLineDistances","createElement","object","attach","vertexColors","linewidth","Provider","value","SegmentObject","constructor","Segment","useContext","useRef","useLayoutEffect"],"sources":["C:/Users/h/Downloads/digital-human/digital-human/digital-human/digital-human-frontend/node_modules/@react-three/drei/core/Segments.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport { useFrame, extend } from '@react-three/fiber';\nimport { Line2, LineMaterial, LineSegmentsGeometry } from 'three-stdlib';\n\nconst context = /*#__PURE__*/React.createContext(null);\n\nconst arrColor = color => color instanceof THREE.Color ? color.toArray() : color;\n\nconst arrPos = pos => pos instanceof THREE.Vector3 ? pos.toArray() : pos;\n\nconst Segments = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {\n  const {\n    limit = 1000,\n    lineWidth = 1.0,\n    children,\n    ...rest\n  } = props;\n  const [segments, setSegments] = React.useState([]);\n  const [line] = React.useState(() => new Line2());\n  const [material] = React.useState(() => new LineMaterial());\n  const [geometry] = React.useState(() => new LineSegmentsGeometry());\n  const [resolution] = React.useState(() => new THREE.Vector2(512, 512));\n  const [positions] = React.useState(() => Array(limit * 6).fill(0));\n  const [colors] = React.useState(() => Array(limit * 6).fill(0));\n  const api = React.useMemo(() => ({\n    subscribe: ref => {\n      setSegments(segments => [...segments, ref]);\n      return () => setSegments(segments => segments.filter(item => item.current !== ref.current));\n    }\n  }), []);\n  useFrame(() => {\n    for (let i = 0; i < limit; i++) {\n      var _segments$i;\n\n      const segment = (_segments$i = segments[i]) == null ? void 0 : _segments$i.current;\n      const segmentStart = segment ? arrPos(segment.start) : [0, 0, 0];\n      const segmentEnd = segment ? arrPos(segment.end) : [0, 0, 0];\n      const segmentColor = segment ? arrColor(segment.color) : [1, 1, 1]; //console.log(segmentStart, segmentEnd, segmentColor)\n\n      for (var j = 0; j < 3; j++) {\n        positions[i * 6 + j] = segmentStart[j];\n        positions[i * 6 + j + 3] = segmentEnd[j];\n        colors[i * 6 + j] = segmentColor[j];\n        colors[i * 6 + j + 3] = segmentColor[j];\n      }\n    }\n\n    geometry.setColors(colors);\n    geometry.setPositions(positions);\n    line.computeLineDistances();\n  });\n  return /*#__PURE__*/React.createElement(\"primitive\", {\n    object: line,\n    ref: forwardedRef\n  }, /*#__PURE__*/React.createElement(\"primitive\", {\n    object: geometry,\n    attach: \"geometry\"\n  }), /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: material,\n    attach: \"material\",\n    vertexColors: true,\n    resolution: resolution,\n    linewidth: lineWidth\n  }, rest)), /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n});\n\nclass SegmentObject {\n  constructor() {\n    this.color = new THREE.Color('white');\n    this.start = new THREE.Vector3(0, 0, 0);\n    this.end = new THREE.Vector3(0, 0, 0);\n  }\n\n}\n\nconst Segment = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {\n  const api = React.useContext(context);\n  if (!api) throw 'Segment must used inside Segments component.';\n  const ref = React.useRef();\n  React.useMemo(() => extend({\n    SegmentObject\n  }), []);\n  React.useLayoutEffect(() => api.subscribe(ref), []);\n  return /*#__PURE__*/React.createElement(\"segmentObject\", _extends({\n    ref: mergeRefs([ref, forwardedRef])\n  }, props));\n});\n\nexport { Segment, Segments };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}