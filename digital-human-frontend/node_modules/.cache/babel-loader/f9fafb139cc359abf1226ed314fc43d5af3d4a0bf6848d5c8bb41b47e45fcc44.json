{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  scale,\n  frames = Infinity,\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 256,\n  ...props\n}, ref) => {\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const shadowCamera = React.useRef();\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n    depthMaterial.onBeforeCompile = shader => shader.fragmentShader = shader.fragmentShader.replace('1.0 - fragCoordZ ), opacity );', '0.0 ), ( 1.0 - fragCoordZ ) * 1.0 );');\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale]);\n  let count = 0;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = null;\n      blurPlane.material = horizontalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTarget.texture;\n      horizontalBlurMaterial.uniforms.h.value = blur / 256;\n      gl.setRenderTarget(renderTargetBlur);\n      gl.render(blurPlane, shadowCamera.current);\n      blurPlane.material = verticalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTargetBlur.texture;\n      verticalBlurMaterial.uniforms.v.value = blur / 256;\n      gl.setRenderTarget(renderTarget);\n      gl.render(blurPlane, shadowCamera.current);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    transparent: true,\n    opacity: opacity\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\nexport { ContactShadows };","map":{"version":3,"names":["_extends","React","THREE","useThree","useFrame","HorizontalBlurShader","VerticalBlurShader","ContactShadows","forwardRef","scale","frames","Infinity","opacity","width","height","blur","far","resolution","props","ref","scene","gl","shadowCamera","useRef","Array","isArray","renderTarget","planeGeometry","depthMaterial","blurPlane","horizontalBlurMaterial","verticalBlurMaterial","renderTargetBlur","useMemo","WebGLRenderTarget","texture","generateMipmaps","PlaneBufferGeometry","rotateX","Math","PI","Mesh","MeshDepthMaterial","depthTest","depthWrite","onBeforeCompile","shader","fragmentShader","replace","ShaderMaterial","count","current","initialBackground","background","overrideMaterial","setRenderTarget","render","material","uniforms","tDiffuse","value","h","v","createElement","geometry","rotation","map","transparent","args"],"sources":["/Users/chenyangdu/Downloads/digital-human-project-updated/digital-human-frontend/node_modules/@react-three/drei/core/ContactShadows.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\n\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  scale,\n  frames = Infinity,\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 256,\n  ...props\n}, ref) => {\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const shadowCamera = React.useRef();\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => shader.fragmentShader = shader.fragmentShader.replace('1.0 - fragCoordZ ), opacity );', '0.0 ), ( 1.0 - fragCoordZ ) * 1.0 );');\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale]);\n  let count = 0;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = null;\n      blurPlane.material = horizontalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTarget.texture;\n      horizontalBlurMaterial.uniforms.h.value = blur / 256;\n      gl.setRenderTarget(renderTargetBlur);\n      gl.render(blurPlane, shadowCamera.current);\n      blurPlane.material = verticalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTargetBlur.texture;\n      verticalBlurMaterial.uniforms.v.value = blur / 256;\n      gl.setRenderTarget(renderTarget);\n      gl.render(blurPlane, shadowCamera.current);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    transparent: true,\n    opacity: opacity\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\n\nexport { ContactShadows };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}