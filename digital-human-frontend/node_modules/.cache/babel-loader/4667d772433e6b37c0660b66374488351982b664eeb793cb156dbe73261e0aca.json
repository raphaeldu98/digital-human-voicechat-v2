{"ast":null,"code":"var _s = $RefreshSig$();\n// import React, { useEffect } from 'react';\n// import { useGLTF } from '@react-three/drei';\n// import { useThree } from '@react-three/fiber';\n// import { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';\n\n// // function DigitalHuman() {\n// //   window.createImageBitmap = undefined\n// //   const { scene, materials, textures, isLoading, error } = useGLTF('/models/xiaohei.fbx', true); // Ensure the second argument is true for loading optimally\n\n// //   useEffect(() => {\n// //     if (error) {\n// //       console.error('Error loading model:', error);\n// //     }\n// //     if (isLoading) {\n// //       console.log('Loading model...');\n// //     }\n// //     if (scene) {\n// //       console.log('Model loaded:', scene);\n// //       console.log('Materials:', materials);\n// //       console.log('Textures:', textures);\n// //     }\n// //   }, [scene, materials, textures, isLoading, error]);\n\n// //   if (error) {\n// //     return <p>Error loading model.</p>;\n// //   }\n// //   if (isLoading) {\n// //     return <p>Loading model...</p>;\n// //   }\n// //   return <primitive object={scene} scale={0.1} position={[0, -1.5, 0]} />;\n// // }\n\n// // export default DigitalHuman;\n\n// function DigitalHuman() {\n//   const { scene } = useThree();\n//   const loader = new FBXLoader();\n\n//   useEffect(() => {\n//     loader.load('/models/xiaohei.fbx', (fbx) => {\n//       scene.add(fbx);\n//     });\n//   }, [loader, scene]);\n\n//   return null; // ��Ϊ��ֱ�ӽ�ģ�����ӵ������У����Է��� null ��յ� fragment\n// }\n\n// export default DigitalHuman;\n\nimport React, { useEffect } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';\nimport { AnimationMixer } from 'three';\nfunction DigitalHuman() {\n  _s();\n  const {\n    scene\n  } = useThree();\n  const loader = new FBXLoader();\n  const mixer = new AnimationMixer(scene);\n  useEffect(() => {\n    loader.load('/models/xiaohei.fbx', fbx => {\n      const action = mixer.clipAction(fbx.animations[0]); // Assuming the first animation\n      action.play();\n      scene.add(fbx);\n    });\n    return () => {\n      mixer.stopAllAction();\n    };\n  }, [loader, mixer, scene]);\n  return null;\n}\n_s(DigitalHuman, \"UhCC8wDD2cMyItT8qLKLhYRbhzM=\", false, function () {\n  return [useThree];\n});\n_c = DigitalHuman;\nexport default DigitalHuman;\nvar _c;\n$RefreshReg$(_c, \"DigitalHuman\");","map":{"version":3,"names":["React","useEffect","useThree","FBXLoader","AnimationMixer","DigitalHuman","_s","scene","loader","mixer","load","fbx","action","clipAction","animations","play","add","stopAllAction","_c","$RefreshReg$"],"sources":["C:/Users/18489/Downloads/digital-human/digital-human/digital-human-frontend/src/DigitalHuman.js"],"sourcesContent":["// import React, { useEffect } from 'react';\n// import { useGLTF } from '@react-three/drei';\n// import { useThree } from '@react-three/fiber';\n// import { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';\n\n// // function DigitalHuman() {\n// //   window.createImageBitmap = undefined\n// //   const { scene, materials, textures, isLoading, error } = useGLTF('/models/xiaohei.fbx', true); // Ensure the second argument is true for loading optimally\n\n// //   useEffect(() => {\n// //     if (error) {\n// //       console.error('Error loading model:', error);\n// //     }\n// //     if (isLoading) {\n// //       console.log('Loading model...');\n// //     }\n// //     if (scene) {\n// //       console.log('Model loaded:', scene);\n// //       console.log('Materials:', materials);\n// //       console.log('Textures:', textures);\n// //     }\n// //   }, [scene, materials, textures, isLoading, error]);\n\n// //   if (error) {\n// //     return <p>Error loading model.</p>;\n// //   }\n// //   if (isLoading) {\n// //     return <p>Loading model...</p>;\n// //   }\n// //   return <primitive object={scene} scale={0.1} position={[0, -1.5, 0]} />;\n// // }\n\n// // export default DigitalHuman;\n\n\n// function DigitalHuman() {\n//   const { scene } = useThree();\n//   const loader = new FBXLoader();\n\n//   useEffect(() => {\n//     loader.load('/models/xiaohei.fbx', (fbx) => {\n//       scene.add(fbx);\n//     });\n//   }, [loader, scene]);\n\n//   return null; // ��Ϊ��ֱ�ӽ�ģ�����ӵ������У����Է��� null ��յ� fragment\n// }\n\n// export default DigitalHuman;\n\n\nimport React, { useEffect } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';\nimport { AnimationMixer } from 'three';\n\nfunction DigitalHuman() {\n  const { scene } = useThree();\n  const loader = new FBXLoader();\n  const mixer = new AnimationMixer(scene);\n\n  useEffect(() => {\n    loader.load('/models/xiaohei.fbx', (fbx) => {\n      const action = mixer.clipAction(fbx.animations[0]); // Assuming the first animation\n      action.play();\n      scene.add(fbx);\n    });\n\n    return () => {\n      mixer.stopAllAction();\n    };\n  }, [loader, mixer, scene]);\n\n  return null;\n}\n\nexport default DigitalHuman;"],"mappings":";AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,SAAS,QAAQ,sCAAsC;AAChE,SAASC,cAAc,QAAQ,OAAO;AAEtC,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM;IAAEC;EAAM,CAAC,GAAGL,QAAQ,CAAC,CAAC;EAC5B,MAAMM,MAAM,GAAG,IAAIL,SAAS,CAAC,CAAC;EAC9B,MAAMM,KAAK,GAAG,IAAIL,cAAc,CAACG,KAAK,CAAC;EAEvCN,SAAS,CAAC,MAAM;IACdO,MAAM,CAACE,IAAI,CAAC,qBAAqB,EAAGC,GAAG,IAAK;MAC1C,MAAMC,MAAM,GAAGH,KAAK,CAACI,UAAU,CAACF,GAAG,CAACG,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACpDF,MAAM,CAACG,IAAI,CAAC,CAAC;MACbR,KAAK,CAACS,GAAG,CAACL,GAAG,CAAC;IAChB,CAAC,CAAC;IAEF,OAAO,MAAM;MACXF,KAAK,CAACQ,aAAa,CAAC,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAACT,MAAM,EAAEC,KAAK,EAAEF,KAAK,CAAC,CAAC;EAE1B,OAAO,IAAI;AACb;AAACD,EAAA,CAlBQD,YAAY;EAAA,QACDH,QAAQ;AAAA;AAAAgB,EAAA,GADnBb,YAAY;AAoBrB,eAAeA,YAAY;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}