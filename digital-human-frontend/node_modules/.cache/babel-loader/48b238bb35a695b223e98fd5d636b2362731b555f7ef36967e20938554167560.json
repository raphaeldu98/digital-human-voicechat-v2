{"ast":null,"code":"var _s = $RefreshSig$();\n// import React, { useEffect } from 'react';\n// import { useGLTF } from '@react-three/drei';\n// import { useThree } from '@react-three/fiber';\n// import { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';\n\n// // function DigitalHuman() {\n// //   window.createImageBitmap = undefined\n// //   const { scene, materials, textures, isLoading, error } = useGLTF('/models/xiaohei.fbx', true); // Ensure the second argument is true for loading optimally\n\n// //   useEffect(() => {\n// //     if (error) {\n// //       console.error('Error loading model:', error);\n// //     }\n// //     if (isLoading) {\n// //       console.log('Loading model...');\n// //     }\n// //     if (scene) {\n// //       console.log('Model loaded:', scene);\n// //       console.log('Materials:', materials);\n// //       console.log('Textures:', textures);\n// //     }\n// //   }, [scene, materials, textures, isLoading, error]);\n\n// //   if (error) {\n// //     return <p>Error loading model.</p>;\n// //   }\n// //   if (isLoading) {\n// //     return <p>Loading model...</p>;\n// //   }\n// //   return <primitive object={scene} scale={0.1} position={[0, -1.5, 0]} />;\n// // }\n\n// // export default DigitalHuman;\n\n// function DigitalHuman() {\n//   const { scene } = useThree();\n//   const loader = new FBXLoader();\n\n//   useEffect(() => {\n//     loader.load('/models/xiaohei.fbx', (fbx) => {\n//       scene.add(fbx);\n//     });\n//   }, [loader, scene]);\n\n//   return null; // ��Ϊ��ֱ�ӽ�ģ�����ӵ������У����Է��� null ��յ� fragment\n// }\n\n// export default DigitalHuman;\n\nimport React, { useEffect, useRef } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport * as THREE from 'three';\nfunction DigitalHuman() {\n  _s();\n  const {\n    scene\n  } = useThree();\n  const videoRef = useRef(null);\n  useEffect(() => {\n    const video = document.createElement('video');\n    video.src = '/path/to/your/video.mp4'; // �����滻����� MP4 �ļ�·��\n    video.crossOrigin = 'anonymous';\n    video.loop = true; // ������Ƶѭ��\n    video.muted = true; // �����Ҫ���Ծ���\n    video.play(); // �Զ�����\n\n    const texture = new THREE.VideoTexture(video);\n    const geometry = new THREE.PlaneGeometry(16, 9);\n    const material = new THREE.MeshBasicMaterial({\n      map: texture\n    });\n    const plane = new THREE.Mesh(geometry, material);\n\n    // ����ƽ��ĳߴ��λ��\n    plane.scale.set(0.5, 0.5, 0.5); // ������Ҫ��������\n    plane.position.set(0, 0, -5); // ������Ҫ����λ��\n\n    scene.add(plane);\n\n    // ��������\n    return () => {\n      video.pause();\n      scene.remove(plane);\n      texture.dispose();\n    };\n  }, [scene]);\n  return null;\n}\n_s(DigitalHuman, \"KLI0dDadegayJ88MeyiNqfteNPk=\", false, function () {\n  return [useThree];\n});\n_c = DigitalHuman;\nexport default DigitalHuman;\nvar _c;\n$RefreshReg$(_c, \"DigitalHuman\");","map":{"version":3,"names":["React","useEffect","useRef","useThree","THREE","DigitalHuman","_s","scene","videoRef","video","document","createElement","src","crossOrigin","loop","muted","play","texture","VideoTexture","geometry","PlaneGeometry","material","MeshBasicMaterial","map","plane","Mesh","scale","set","position","add","pause","remove","dispose","_c","$RefreshReg$"],"sources":["C:/Users/18489/Downloads/digital-human/digital-human/digital-human-frontend/src/DigitalHuman.js"],"sourcesContent":["// import React, { useEffect } from 'react';\n// import { useGLTF } from '@react-three/drei';\n// import { useThree } from '@react-three/fiber';\n// import { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';\n\n// // function DigitalHuman() {\n// //   window.createImageBitmap = undefined\n// //   const { scene, materials, textures, isLoading, error } = useGLTF('/models/xiaohei.fbx', true); // Ensure the second argument is true for loading optimally\n\n// //   useEffect(() => {\n// //     if (error) {\n// //       console.error('Error loading model:', error);\n// //     }\n// //     if (isLoading) {\n// //       console.log('Loading model...');\n// //     }\n// //     if (scene) {\n// //       console.log('Model loaded:', scene);\n// //       console.log('Materials:', materials);\n// //       console.log('Textures:', textures);\n// //     }\n// //   }, [scene, materials, textures, isLoading, error]);\n\n// //   if (error) {\n// //     return <p>Error loading model.</p>;\n// //   }\n// //   if (isLoading) {\n// //     return <p>Loading model...</p>;\n// //   }\n// //   return <primitive object={scene} scale={0.1} position={[0, -1.5, 0]} />;\n// // }\n\n// // export default DigitalHuman;\n\n\n// function DigitalHuman() {\n//   const { scene } = useThree();\n//   const loader = new FBXLoader();\n\n//   useEffect(() => {\n//     loader.load('/models/xiaohei.fbx', (fbx) => {\n//       scene.add(fbx);\n//     });\n//   }, [loader, scene]);\n\n//   return null; // ��Ϊ��ֱ�ӽ�ģ�����ӵ������У����Է��� null ��յ� fragment\n// }\n\n// export default DigitalHuman;\n\nimport React, { useEffect, useRef } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport * as THREE from 'three';\n\nfunction DigitalHuman() {\n  const { scene } = useThree();\n  const videoRef = useRef(null);\n\n  useEffect(() => {\n    const video = document.createElement('video');\n    video.src = '/path/to/your/video.mp4';  // �����滻����� MP4 �ļ�·��\n    video.crossOrigin = 'anonymous';\n    video.loop = true;  // ������Ƶѭ��\n    video.muted = true;  // �����Ҫ���Ծ���\n    video.play();  // �Զ�����\n\n    const texture = new THREE.VideoTexture(video);\n    const geometry = new THREE.PlaneGeometry(16, 9);\n    const material = new THREE.MeshBasicMaterial({ map: texture });\n    const plane = new THREE.Mesh(geometry, material);\n\n    // ����ƽ��ĳߴ��λ��\n    plane.scale.set(0.5, 0.5, 0.5);  // ������Ҫ��������\n    plane.position.set(0, 0, -5);  // ������Ҫ����λ��\n\n    scene.add(plane);\n\n    // ��������\n    return () => {\n      video.pause();\n      scene.remove(plane);\n      texture.dispose();\n    };\n  }, [scene]);\n\n  return null;\n}\n\nexport default DigitalHuman;"],"mappings":";AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM;IAAEC;EAAM,CAAC,GAAGJ,QAAQ,CAAC,CAAC;EAC5B,MAAMK,QAAQ,GAAGN,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,MAAMQ,KAAK,GAAGC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;IAC7CF,KAAK,CAACG,GAAG,GAAG,yBAAyB,CAAC,CAAE;IACxCH,KAAK,CAACI,WAAW,GAAG,WAAW;IAC/BJ,KAAK,CAACK,IAAI,GAAG,IAAI,CAAC,CAAE;IACpBL,KAAK,CAACM,KAAK,GAAG,IAAI,CAAC,CAAE;IACrBN,KAAK,CAACO,IAAI,CAAC,CAAC,CAAC,CAAE;;IAEf,MAAMC,OAAO,GAAG,IAAIb,KAAK,CAACc,YAAY,CAACT,KAAK,CAAC;IAC7C,MAAMU,QAAQ,GAAG,IAAIf,KAAK,CAACgB,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC;IAC/C,MAAMC,QAAQ,GAAG,IAAIjB,KAAK,CAACkB,iBAAiB,CAAC;MAAEC,GAAG,EAAEN;IAAQ,CAAC,CAAC;IAC9D,MAAMO,KAAK,GAAG,IAAIpB,KAAK,CAACqB,IAAI,CAACN,QAAQ,EAAEE,QAAQ,CAAC;;IAEhD;IACAG,KAAK,CAACE,KAAK,CAACC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAE;IACjCH,KAAK,CAACI,QAAQ,CAACD,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAE;;IAE/BpB,KAAK,CAACsB,GAAG,CAACL,KAAK,CAAC;;IAEhB;IACA,OAAO,MAAM;MACXf,KAAK,CAACqB,KAAK,CAAC,CAAC;MACbvB,KAAK,CAACwB,MAAM,CAACP,KAAK,CAAC;MACnBP,OAAO,CAACe,OAAO,CAAC,CAAC;IACnB,CAAC;EACH,CAAC,EAAE,CAACzB,KAAK,CAAC,CAAC;EAEX,OAAO,IAAI;AACb;AAACD,EAAA,CAhCQD,YAAY;EAAA,QACDF,QAAQ;AAAA;AAAA8B,EAAA,GADnB5B,YAAY;AAkCrB,eAAeA,YAAY;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}